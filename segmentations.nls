to create_segmentations
  
let list-gender map [[x] -> (item 28 x)] populations ;; 27th column, school-performance
  set list-gender filter [[y] -> y > -1 ] list-gender
  set gender []
  (foreach [1 2][[z] ->
    let list-one-gender filter [[y] -> y = z] list-gender
    let one-probability (length list-one-gender) / (length list-gender)
    set gender lput (list z one-probability) gender
    ])
;; show gender

  let list-performance map [[x] -> (item 27 x)] populations ;; 27th column, school-performance
  set list-performance filter [[y] -> y > -1 ] list-performance
  set school-performance []
  (foreach [1 2 3 4 5][[z] ->
    let list-one-performance filter [[y] -> y = z] list-performance
    let one-probability (length list-one-performance) / (length list-performance)
    set school-performance lput (list z one-probability) school-performance
    ])
;; show school-performance

  let list-competence map [[x] -> (item 2 x)] populations
  set list-competence filter [[y] -> y > -1 ] list-competence
  set music-competence []
  (foreach [1 2][[z] ->
    let list-one-competence filter [[y] -> y = z] list-competence
    let one-probability (length list-one-competence) / (length list-competence)
    set music-competence lput (list z one-probability) music-competence
    ])
 ;; show music-competence

  let list-play map [[x] -> (item 3 x)] populations
  set list-play filter [[y] -> y > -1 ] list-play
  set band-play []
  (foreach [1 2][[z] ->
    let list-one-play filter [[y] -> y = z] list-play
    let one-probability (length list-one-play) / (length list-play)
    set band-play lput (list z one-probability) band-play
    ])
 ;; show band-play

  let list-tips map [[x] -> (item 1 x)] populations
  set list-tips filter [[y] -> y > -1 ] list-tips
  set music-tips []
  (foreach [1 2 3][[z] ->
    let list-one-tips filter [[y] -> y = z] list-tips
    let one-probability (length list-one-tips) / (length list-tips)
    set music-tips lput (list z one-probability) music-tips
    ])
 ;; show music-tips

   let list-time map [[x] -> (item 14 x)] populations
  set list-time filter [[y] -> y > -1 ] list-time
  set music-time []
  (foreach [1 2 3 4][[z] ->
    let list-one-time filter [[y] -> y = z] list-time
    let one-probability (length list-one-time) / (length list-time)
    set music-time lput (list z one-probability) music-time
    ])
 ;; show music-time


  let list-preferences map [[x] -> (item 13 x)] populations
  set list-preferences filter [[y] -> y > -1 ] list-preferences
  set music-preferences []
  (foreach [1 2 3 4 5 6 7 8 9][[z] ->
    let list-one-preferences filter [[y] -> y = z] list-preferences
    let one-probability (length list-one-preferences) / (length list-preferences)
    set music-preferences lput (list z one-probability) music-preferences
    ])
 ;; show music-preferences


  let list-share map [[x] -> (item 15 x)] populations
  set list-share filter [[y] -> y > -1 ] list-share
  set social-share []
  (foreach [1 2 3 4 5][[z] ->
    let list-one-share filter [[y] -> y = z] list-share
    let one-probability (length list-one-share) / (length list-share)
    set social-share lput (list z one-probability) social-share
    ])
  ;; show social-share


  let list-interview map [[x] -> (item 16 x)] populations
  set music-interview []
  (foreach [1 2][[z] ->
    let list-one-interview filter [[y] -> y = z] list-interview
    let one-probability (length list-one-interview) / (length list-interview)
    set music-interview lput (list z one-probability) music-interview
    ])
 ;;  show music-interview

    let list-live map [[x] -> (item 17 x)] populations
  set music-live []
  (foreach [1 2][[z] ->
    let list-one-live filter [[y] -> y = z] list-live
    let one-probability (length list-one-live) / (length list-live)
    set music-live lput (list z one-probability) music-live
    ])
 ;; show music-live

    let list-quotes map [[x] -> (item 18 x)] populations
  set list-quotes filter [[y] -> y > -1 ] list-quotes
  set music-quotes []
  (foreach [1 2 3 4][[z] ->
    let list-one-quotes filter [[y] -> y = z] list-quotes
    let one-probability (length list-one-quotes) / (length list-quotes)
    set music-quotes lput (list z one-probability) music-quotes
    ])
 ;; show music-quotes

    let list-dress map [[x] -> (item 19 x)] populations
  set music-dress []
  (foreach [1 2 3 4][[z] ->
    let list-one-dress filter [[y] -> y = z] list-dress
    let one-probability (length list-one-dress) / (length list-dress)
    set music-dress lput (list z one-probability) music-dress
    ])
 ;; show music-dress

  let list-age map [[x] -> (item 29 x)] populations
  set list-age filter [[y] -> y > -1 ] list-age
  set age []
  (foreach [1 2 3 4 5 6 7][[z] ->
    let list-one-age filter [[y] -> y = z] list-age
    let one-probability (length list-one-age) / (length list-age)
    set age lput (list z one-probability) age
    ])
  ;; show age

let list-mom map [[x] -> (item 31 x)] populations
  set mom-study []
  (foreach [1 2 3 4 5][[z] ->
    let list-one-mom filter [[y] -> y = z] list-mom
    let one-probability (length list-one-mom) / (length list-mom)
    set mom-study lput (list z one-probability) mom-study
    ])
 ;; show mom-study

  let list-dad map [[x] -> (item 32 x)] populations
  set dad-study []
  (foreach [1 2 3 4 5][[z] ->
    let list-one-dad filter [[y] -> y = z] list-dad
    let one-probability (length list-one-dad) / (length list-dad)
    set dad-study lput (list z one-probability) dad-study
    ])
 ;; show dad-study
  
;;  show "class"
  let list-class map [[x] -> (item 33 x)] populations
  set list-class filter [[y] -> y != "#NULL!" ] list-class
  set class []
  (foreach [1 2 3 4 5][[z] ->
    let list-one-class filter [[y] -> y = z] list-class
    let one-probability (length list-one-class) / (length list-class)
    set class lput (list z one-probability) class
    ])
;;  show class
  
end